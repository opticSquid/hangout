services:
  # * core internal services
  # database
  geo-postgres:
    image: postgis/postgis
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=PkNLm@#2357
    volumes:
      - geopostgresData:/var/lib/postgresql/data

  # event bus
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes:
      - kafkaData:/bitnami/kafka
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,LISTENER_DOCKER_INTERNAL://:19091
      # use this config if the service(s) under develpment is running directly on baremetal
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,LISTENER_DOCKER_INTERNAL://kafka:19091,
      # use this config if the service(s) under development is running as docker container
      # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,LISTENER_DOCKER_INTERNAL://kafka:19091,
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LISTENER_DOCKER_INTERNAL
      # Kafka Broker
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LOG_RETENTION_HOURS=1

  # storage
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - /media/soumalya/793f3da3-8908-48a8-a4ce-a638275951fa/minio-storage:/data
    environment:
      - MINIO_ROOT_USER=ROOTUSER
      - MINIO_ROOT_PASSWORD=CHANGEME123

  # observability data collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    command:
      - --config=/etc/otelcol-contrib/config.yaml
    volumes:
      - ./docker/collector/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4318:4318" # OTLP HTTP receiver
      - "55679:55679" # zpages extension

  # * own services
  auth-api:
    # image: ghcr.io/opticsquid/hangout-auth-api:v2.0.4
    image: test/hangout-auth-api:v2.0.5
    environment:
      - DB_URL=hangout-geo-postgres-1:5432
      - DB_NAME=userdb
      - DB_USERNAME=postgres
      - DB_PASSWORD=PkNLm@#2357
      - KAFKA_SERVER=hangout-kafka-1:19091
      - ACCESS_TOKEN_SECRET=u_UGqxTQ2BvLbhkeo2B0QV-Hq6GqWzPyqwgSrXLgL7JCtp6SXWU9L1BKjEDSStAb2sZdy0iKrLU6z8MIEZze3CbhjXQfDUW7WtMEpv1yEmWdPoijGtiVLELF-5yaUYgVVrPVKNFv7xqIVH5sDl0VQ6El4d0v013qJ0j75UyZQtvGHjUMEmTE0H7iMf2yC19HBAGKzuwraZvNzLUStzLLcbRA6jlrnWqGyHfVBkoCjR2-Dtzom84yI20wk44xxC7NdrII40fZobLq856lQxewOCMXPG4U6sx_XuFwon9p1n0I-rrItcMj_lQHhPf-Z2lXnM05_DlXcu7LE4v2NdUjUw
      - REFRESH_TOKEN_SECRET=kTYpg95oeqgnBhfi16DYSe2NT2T6kXPDKGrLeXpSA2rc7Jltt32AtYGPdmsYFoKt0H2_dJj8RPgbP3UGzD6ONSDJOWbbMvSU1MyNDM2xj5ncv2oN1iewNXz6gEyTdeuR3IolmGnPBPFVZR78is6MnS7W7WBpRvQCoaes9l7GhMHf6MhtX4nstm9LkTUx5-MQw4Tg5XTgo82FApVcg1x9hvDno6WTci_gJ9874xsAi5wg9V15cXFTesJ3GJfGf4NTkX9SqqAVG_D08oLOXFAXjvLDYVrl_O_9JMyCBgVEyMV81UMw8v72nYGAfDPy2uH3nTUOTXA4qlijAXOFGxV7kg
      - NOTIFICATION_SERVICE=http://hangout-notification-service-1:5012
      - IP_API_URL=http://ip-api.com
      - OTEL_COLLECTOR=http://hangout-otel-collector-1:4318
      - LOG_DIR=/logs
      - INTERNAL_SERVICES_ORIGIN=http://hangout-notification-service-1:5012,http://hangout-post-api-1:5013
      - CLIENT_ORIGIN=http://localhost:3000
    ports:
      - 5011:5011
    volumes:
      - ./core-services/hangout-auth-api/logs:/logs
    depends_on:
      - geo-postgres
      - kafka
      - otel-collector

  notification-service:
    image: ghcr.io/opticsquid/hangout-notification-service:v1.0.5
    environment:
      - SMTP_SERVICE=gmail
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=465
      - SMTP_ISSECURE=true
      - SMTP_USERNAME=soumalyabhattacharya6@gmail.com
      - SMTP_PASSWORD=eswwhaiitvmwzrkq
      - MAIL_CONFIRMATION_URL=http://localhost:80/auth/v1/public/verify?token=
      - JWT_PRIVATE_KEY=e4a9952baf6705504223b438926848471d3321161460310bd2e85d8d3d10058a7ece8fe93eaae260af8dc1182ca6bd9635f67801e834c4af0c29e50db6ab05b302b4ea2b8e2c4841ee6f59cd649009a02881e6e66f90d0e4031f9e9defef03cd9c34f65feadc4819f1004f760f712c81f5ed67e6f82ee0c2de88974c46ae6577
      - port=5012
      - KAFKA_SERVER=hangout-kafka-1:19091
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_PROTOCOL=http
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://hangout-otel-collector-1:4318
    ports:
      - 5012:5012
    depends_on:
      - kafka
      - otel-collector

  post-api:
    image: ghcr.io/opticsquid/hangout-post-api:v1.1.1
    environment:
      - DB_URL=hangout-geo-postgres-1:5432
      - DB_NAME=postdb
      - DB_USERNAME=postgres
      - DB_PASSWORD=PkNLm@#2357
      - KAFKA_SERVER=hangout-kafka-1:19091
      - OTEL_COLLECTOR=http://hangout-otel-collector-1:4318
      - AUTH_SERVICE=http://hangout-auth-api-1:5011
      - LOG_DIR=/logs
      - MINIO_SERVER=http://hangout-minio-1:9000
      - MINIO_ACCESS_KEY=IevColMiX5eBAZUPmfN6
      - MINIO_SECRET_KEY=G8HC3uphX1TlDDYSxtjTrFSVdRe95XJXV2IhqEYg
      - UPLOAD_BUCKET=hangout-upload-path
    ports:
      - 5013:5013
    volumes:
      - ./core-services/hangout-post-api/logs:/logs
    depends_on:
      - geo-postgres
      - kafka
      - minio
      - otel-collector

  storage-service:
    image: ghcr.io/opticsquid/hangout-storage-service:v1.0.9
    environment:
      - KAFKA_HOST=hangout-kafka-1
      - KAFKA_PORT=19091
      - KAFKA_TOPIC=content
      - KAFKA_GROUPID=hangout-storage-service
      - LOG_LEVEL=debug
      - LOG_BACKEND=zerolog
      - PROCESS_POOLSTRENGTH=4
      - PROCESS_QUEUELENGTH=100
      - MINIO_BASEURL=hangout-minio-1:9000
      - MINIO_ACCESSKEY=vLmiqXs8DUB2jwocd14W
      - MINIO_SECRETKEY=mK5ByFQJKbm2nsjBvyLmkggITrP0sdfSPbspvr45
      - MINIO_UPLOADBUCKET=hangout-upload-path
      - MINIO_STORAGEBUCKET=hangout-storage-path
    depends_on:
      - kafka
      - minio

  # reverse-proxy for own services
  gateway:
    image: nginx:1.27
    ports:
      - 80:80
    volumes:
      - ./docker/gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-api
      - post-api
      - minio

  # * Ancillary Services
  # kafka UI
  kafdrop:
    image: obsidiandynamics/kafdrop:4.1.1-SNAPSHOT
    ports:
      - "9002:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:19091
      - SERVER_SERVLET_CONTEXTPATH=/
    depends_on:
      - kafka

  # metrics and alerts
  prometheus:
    image: prom/prometheus
    # required for calling local servers from prometheus
    extra_hosts: ["host.docker.internal:host-gateway"]
    command:
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
      - --storage.tsdb.retention.time=1h
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:rw
      - prometheusData:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # traces
  tempo:
    image: grafana/tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:rw
      - tempoData:/tmp
    ports:
      - "3200:3200" # grafana => tempo
      - "4317" # otlp grpc
    depends_on:
      - otel-collector
      - prometheus
      - loki

  # logs
  loki:
    image: grafana/loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports:
      - "3100:3100" # http log recieve port
      - "9095:9095" # grpc log recieve port
    volumes:
      - ./docker/loki/loki-local.yaml:/etc/loki/local-config.yaml:rw
      - lokiData:/loki
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    depends_on:
      - otel-collector

  # dashboard
  grafana:
    image: grafana/grafana:latest
    # volumes:
    # - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:rw
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

volumes:
  geopostgresData:
    driver: local
  kafkaData:
    driver: local
  prometheusData:
    driver: local
  tempoData:
    driver: local
  lokiData:
    driver: local
